{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "",
    "Metadata"                 : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : {
                        "default" : "Prerequisites"
                    },
                    "Parameters" : [
                        "IsCloudTrailEnabled"
                    ]
                }
            ],
            "ParameterLabels" : {
                "IsCloudTrailEnabled" : {
                    "default" : "Is CloudTrail already enabled in this region? CloudTrail is a requirement for Cloudwatch Events. If not enabled, please enable CloudTrail before proceeding."
                }
            }
        }
    },
    "Parameters"               : {
        "IsCloudTrailEnabled" : {
            "Description" : "Specify if CloudTrail is enabled in the current region",
            "Type"        : "String",
            "Default"     : "Yes",
            "AllowedValues" : [
                "Yes",
                "No"
            ]
        }
    },
    "Conditions"               : {
        "CreateResources" : {
            "Fn::Equals" : [
                {
                    "Ref" : "IsCloudTrailEnabled"
                },
                "Yes"
            ]
        }
    },
    "Resources"                : {
        "EC2EventRule" : {
            "Type" : "AWS::Events::Rule",
            "Condition" : "CreateResources",
            "Properties" : {
                "Description" : "Trigger a Lambda function anytime a new EC2 resource is created (EC2 instance, EBS volume, EBS Snapshot or AMI)",
                "EventPattern" : {
                    "detail-type" : [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail"      : {
                        "eventSource" : [
                            "ec2.amazonaws.com"
                        ],
                        "eventName"   : [
                            "CreateVolume",
                            "RunInstances",
                            "CreateImage",
                            "CreateSnapshot"
                        ]
                    }
                },
                "Name"         : "New-EC2Resource-Event",
                "State"        : "ENABLED",
                "Targets"      : [
                    {
                        "Arn" : {
                            "Ref" : "ProductionAlias"
                        },
                        "Id"  : "Production"
                    }
                ]
            }
        },
        "CFAutoTag"    : {
            "Type" : "AWS::Lambda::Function",
            "Condition" : "CreateResources",
            "Properties" : {
                "Code" : {
                    "ZipFile" : "from __future__ import print_function\nfrom datetime import datetime\nfrom dateutil import tz\nimport json\nimport boto3\nimport logging\nimport time\nimport datetime\n\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef lambda_handler(event, context):\n\n    logger.info('Event: ' + str(event))\n    print(event)\n\n    ids = []\n\n    try:\n        region = event['region']\n        detail = event['detail']\n        eventtime = detail['eventTime']\n        eventname = detail['eventName']\n        arn = detail['userIdentity']['arn']\n        principal = detail['userIdentity']['principalId']\n        userType = detail['userIdentity']['type']\n\n        creation_time = datetime.datetime.strptime(eventtime, '%Y-%m-%dT%H:%M:%SZ').strftime('%d-%m-%Y %H:%M:%S')\n\n        print(creation_time)\n\n        if userType == 'IAMUser':\n            user = detail['userIdentity']['userName']\n\n        else:\n            user = principal.split(':')[1]\n\n\n        logger.info('principalId: ' + str(principal))\n        logger.info('region: ' + str(region))\n        logger.info('eventName: ' + str(eventname))\n        logger.info('creation_time: ' + str(creation_time))\n        logger.info('detail: ' + str(detail))\n\n        if not detail['responseElements']:\n            logger.warning('Not responseElements found')\n            if detail['errorCode']:\n                logger.error('errorCode: ' + detail['errorCode'])\n            if detail['errorMessage']:\n                logger.error('errorMessage: ' + detail['errorMessage'])\n            return False\n\n        ec2 = boto3.resource('ec2')\n\n        if eventname == 'CreateVolume':\n            ids.append(detail['responseElements']['volumeId'])\n            logger.info(ids)\n\n        elif eventname == 'RunInstances':\n            items = detail['responseElements']['instancesSet']['items']\n            for item in items:\n                ids.append(item['instanceId'])\n            logger.info(ids)\n            logger.info('number of instances: ' + str(len(ids)))\n\n            base = ec2.instances.filter(InstanceIds=ids)\n\n            for instance in base:\n                for vol in instance.volumes.all():\n                    ids.append(vol.id)\n                for eni in instance.network_interfaces:\n                    ids.append(eni.id)\n\n        elif eventname == 'CreateImage':\n            ids.append(detail['responseElements']['imageId'])\n            logger.info(ids)\n\n        elif eventname == 'CreateSnapshot':\n            ids.append(detail['responseElements']['snapshotId'])\n            logger.info(ids)\n\n        elif eventname == 'StartInstances':\n            items = detail['responseElements']['instancesSet']['items']\n            for item in items:\n                ids.append(item['instanceId'])\n            for resourceid in ids:\n                print('Tagging resource ' + resourceid)\n                ec2.create_tags(Resources=ids, Tags=[{'Key': 'LastStartTime', 'Value': creation_time}, {'Key': 'LastStartedByUser', 'Value': user}])\n            ids = []\n\n        elif eventname == 'StopInstances':\n            items = detail['responseElements']['instancesSet']['items']\n            for item in items:\n                ids.append(item['instanceId'])\n            for resourceid in ids:\n                print('Tagging resource ' + resourceid)\n                ec2.create_tags(Resources=ids, Tags=[{'Key': 'LastStopTime', 'Value': creation_time}, {'Key': 'LastStoppedByUser', 'Value': user}])\n            ids = []\n\n        else:\n            logger.warning('Not supported action')\n\n        if ids:\n            for resourceid in ids:\n                print('Tagging resource ' + resourceid)\n            ec2.create_tags(Resources=ids, Tags=[{'Key': 'CreatedByUser', 'Value': user}, {'Key': 'JIRATicketID', 'Value': ''}, {'Key': 'CreationTime', 'Value': creation_time}, {'Key': 'LastStartTime', 'Value': creation_time}])\n\n        logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '')\n        return True\n    except Exception as e:\n        logger.error('Something went wrong: ' + str(e))\n        return False\n\n"
                },
                "Description" : "This function tags EC2 Resources in response to Cloudwatch Events.",
                "Handler"     : "index.lambda_handler",
                "Role"        : {
                    "Fn::GetAtt" : [
                        "LambdaAutoTagRole",
                        "Arn"
                    ]
                },
                "Runtime"     : "python2.7",
                "Timeout"     : "60"
            }
        },
        "StableVersion" : {
            "Type" : "AWS::Lambda::Version",
            "Condition" : "CreateResources",
            "Properties" : {
                "FunctionName" : {
                    "Ref" : "CFAutoTag"
                },
                "Description"  : "Stable version"
            }
        },
        "ProductionAlias" : {
            "Type" : "AWS::Lambda::Alias",
            "Condition" : "CreateResources",
            "Properties" : {
                "FunctionName" : {
                    "Ref" : "CFAutoTag"
                },
                "FunctionVersion" : "$LATEST",
                "Name"            : "PROD"
            }
        },
        "PermissionForEventsToInvokeLambda" : {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "FunctionName" : {
                    "Ref" : "ProductionAlias"
                },
                "Action"       : "lambda:InvokeFunction",
                "Principal"    : "events.amazonaws.com",
                "SourceArn"    : {
                    "Fn::GetAtt" : [
                        "EC2EventRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaAutoTagRole"                 : {
            "Type" : "AWS::IAM::Role",
            "Condition" : "CreateResources",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies"                 : [
                    {
                        "PolicyName" : "LambdaGetLatestWindowsAmiIdPolicy",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Sid" : "Stmt1458923097000",
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "cloudtrail:LookupEvents"
                                    ],
                                    "Resource" : [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid" : "Stmt1458923121000",
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ec2:CreateTags",
                                        "ec2:Describe*",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource" : [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ManageEC2InstancesGroup"                : {
            "Type" : "AWS::IAM::Group",
            "Condition" : "CreateResources"
        },
        "TagBasedEC2RestrictionsPolicy"     : {
            "Type" : "AWS::IAM::ManagedPolicy",
            "Condition" : "CreateResources",
            "Properties" : {
                "Description" : "This policy allows Start/Stop/Reboot/Terminate for EC2 instances where the tag 'Owner' doesn't match the current requester's user ID.",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Sid" : "LaunchEC2Instances",
                            "Effect" : "Allow",
                            "Action" : [
                                "ec2:Describe*",
								"ec2:RunInstances"
                            ],
                            "Resource" : [
                                "*"
                            ]
                        },
                        {
                            "Sid" : "AllowActionsIfYouAreTheOwner",
                            "Effect" : "Allow",
                            "Action" : [
                                "ec2:StopInstances",
                                "ec2:StartInstances",
                                "ec2:RebootInstances",
                                "ec2:TerminateInstances"
                            ],
                            "Condition" : {
                                "StringEquals" : {
                                    "ec2:ResourceTag/PrincipalId" : "${aws:userid}"
                                }
                            },
                            "Resource"  : [
                                "*"
                            ]
                        }
                    ]
                },
                "Groups"         : [
                    {
                        "Ref" : "ManageEC2InstancesGroup"
                    }
                ]
            }
        }
    },
    "Outputs"                  : {
    }
}